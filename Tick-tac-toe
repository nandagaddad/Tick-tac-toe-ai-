import math

def print_board(board): for row in board: print(" ".join(row)) print()

def is_moves_left(board): return any(cell == ' ' for row in board for cell in row)

def evaluate(board): for row in range(3): if board[row][0] == board[row][1] == board[row][2] and board[row][0] != ' ': return 10 if board[row][0] == 'X' else -10

for col in range(3):
    if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
        return 10 if board[0][col] == 'X' else -10

if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
    return 10 if board[0][0] == 'X' else -10
if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
    return 10 if board[0][2] == 'X' else -10

return 0

def minimax(board, depth, is_max): score = evaluate(board)

if score == 10:
    return score - depth
if score == -10:
    return score + depth
if not is_moves_left(board):
    return 0

if is_max:
    best = -math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                best = max(best, minimax(board, depth + 1, False))
                board[i][j] = ' '
    return best
else:
    best = math.inf
    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'O'
                best = min(best, minimax(board, depth + 1, True))
                board[i][j] = ' '
    return best

def find_best_move(board): best_val = -math.inf best_move = (-1, -1)

for i in range(3):
    for j in range(3):
        if board[i][j] == ' ':
            board[i][j] = 'X'
            move_val = minimax(board, 0, False)
            board[i][j] = ' '
            if move_val > best_val:
                best_move = (i, j)
                best_val = move_val

return best_move

def play_game(): board = [[' ' for _ in range(3)] for _ in range(3)] player = 'O'

while is_moves_left(board):
    print_board(board)
    if player == 'O':
        row, col = map(int, input("Enter your move (row and column): ").split())
        if board[row][col] != ' ':
            print("Invalid move! Try again.")
            continue
        board[row][col] = 'O'
    else:
        print("AI is making a move...")
        row, col = find_best_move(board)
        board[row][col] = 'X'
    
    score = evaluate(board)
    if score == 10:
        print_board(board)
        print("AI wins!")
        return
    elif score == -10:
        print_board(board)
        print("You win!")
        return
    
    player = 'X' if player == 'O' else 'O'

print_board(board)
print("It's a draw!")

if name == "main": play_game()

